datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  repositories  Repository[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Commit {
  id           String     @id
  sha          String     @default("some SHA")
  message      String     @default("some Message") @db.Text
  commitDate   String
  url          String
  Repository   Repository @relation(fields: [repositoryId], references: [id])
  repositoryId Int
}

model Repository {
  id            Int           @id
  nodeId        String
  name          String        @default("")
  url           String
  watchersCount Int           @default(0)
  forksCount    Int           @default(0)
  createdAt     String?
  updatedAt     String?
  pushedAt      String?
  starsCount    Int           @default(0)
  owner         User          @relation(fields: [userId], references: [id])
  userId        String
  languages     Json
  commits       Commit[]
  contributors  Contributor[]
  pullRequests  PullRequest[]
}

model Contributor {
  id            Int          @id
  nodeId        String
  login         String
  imageUrl      String
  url           String
  contributions Int          @default(0)
  repositories  Repository[]
}

model PullRequest {
  id           Int         @id
  nodeId       String
  url          String
  state        String
  title        String
  number       Int
  repository   Repository? @relation(fields: [repositoryId], references: [id])
  repositoryId Int
}
