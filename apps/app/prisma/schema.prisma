datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String       @id @default(cuid())
  name                  String?
  login                 String       @default("")
  email                 String?      @unique
  emailVerified         DateTime?
  image                 String?
  languages             String       @default("")
  lastFetchRepositories String       @default("")
  accounts              Account[]
  sessions              Session[]
  repositories          Repository[]
  commits               Commit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Commit {
  id           String     @id @unique
  sha          String     @default("some SHA")
  message      String     @default("some Message") @db.Text
  commitDate   DateTime
  url          String
  repository   Repository @relation(fields: [repositoryId], references: [id])
  repositoryId Int
  User         User       @relation(fields: [userId], references: [id])
  userId       String
  additions    Int
  deletions    Int
}

model Repository {
  id             Int              @id @unique
  nodeId         String
  name           String           @default("")
  url            String
  watchersCount  Int              @default(0)
  forksCount     Int              @default(0)
  createdAt      DateTime
  updatedAt      DateTime
  pushedAt       DateTime
  starsCount     Int              @default(0)
  owner          User             @relation(fields: [userId], references: [id])
  userId         String
  languages      Json
  commits        Commit[]
  contributors   Contributor[]
  pullRequests   PullRequest[]
  lastFetchDates LastFetchDates[]
}

model Contributor {
  id            Int          @id
  nodeId        String
  login         String
  imageUrl      String
  url           String
  contributions Int          @default(0)
  repositories  Repository[]
}

model PullRequest {
  id           Int         @id
  nodeId       String
  url          String
  state        String
  title        String
  number       Int
  repository   Repository? @relation(fields: [repositoryId], references: [id])
  repositoryId Int
}

model LastFetchDates {
  commits      String      @default("")
  pullRequests String      @default("")
  contributors String      @default("")
  repositoryId Int         @id
  repository   Repository? @relation(fields: [repositoryId], references: [id])
}
